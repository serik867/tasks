File handling
A file is some information or data which stays in the computer storage devices. 
You already know about different kinds of file , like your music files, video files, text files. 
Python gives you easy ways to manipulate these files. Generally we divide files in two categories, text file 
and binary file. Text files are simple text where as the binary files contain binary data which is only 
readable by computer.

File opening
To open a file we use open() function. It requires two arguments, first the file path or file name, 
second which mode it should open. Modes are like

“r” -> open read only, you can read the file but can not edit / delete anything inside
“w” -> open with write power, means if the file exists then delete all content and open it to write
“a” -> open in append mode
The default mode is read only, ie if you do not provide any mode it will open the file as read only. 

Open function modes in python:

The argument mode points to a string beginning with one of the following
 sequences (Additional characters may follow these sequences.):

 ``r''   Open text file for reading.  The stream is positioned at the
         beginning of the file.

 ``r+''  Open for reading and writing.  The stream is positioned at the
         beginning of the file.

 ``w''   Truncate file to zero length or create text file for writing.
         The stream is positioned at the beginning of the file.

 ``w+''  Open for reading and writing.  The file is created if it does not
         exist, otherwise it is truncated.  The stream is positioned at
         the beginning of the file.

 ``a''   Open for writing.  The file is created if it does not exist.  The
         stream is positioned at the end of the file.  Subsequent writes
         to the file will always end up at the then current end of file,
         irrespective of any intervening fseek(3) or similar.

 ``a+''  Open for reading and writing.  The file is created if it does not
         exist.  The stream is positioned at the end of the file.  Subse-
         quent writes to the file will always end up at the then current
         end of file, irrespective of any intervening fseek(3) or similar.

         